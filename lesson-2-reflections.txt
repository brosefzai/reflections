What happens when you initialize a repository? Why do you need to do it?

		This is required for setting up git for a given directory. Individual files,
		however, haven't been tracked yet.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

		The 'staging area' is simply the intermediary step between commits; when
		files that are ready to be included in the repo are preliminarily added.

How can you use the staging area to make sure you have one commit per logical
change?

		You can compare the staging area with the working (current) directory (git
		diff), to ensure that the staging area (which have preliminary commits via
		git add) have the same changes as the files currently being worked on.
		You can compare the staging area with the last commit (git diff --staged)
		to check changes between the working commit (ie staging area), and last
		commit.
		The staging area can thus be verified on both ends to check if it holds
		a change that warrants a logical commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

		When experimenting, creating alternative versions of a program (ie 
		translations), or adding a fix to code that already has more than one branch 
		etc. Branching enables multiple versions of code to be worked on safely and
		cleanly.

How do the diagrams help you visualize the branch structure?

		They illustrate how the branches are spacially related to one another.
		They also help highlight that 'branches' are in themselves an entity, and are
		not just a collection of commits. This also means that a new commit can be
		outside a branch, and so can be 'lost' if not having been addressed
		appropriately. Here, we then use git checkout -b new_branch_name to 
		create a new branch, and to switch to it, in order for our
		commit-in-limbo (currently in the purgatory stage) to be officially
		assigned a branch and thus committed.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?



What are the pros and cons of Git's automatic merging vs. always doing merges
manually?


